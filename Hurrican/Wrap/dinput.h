#pragma once

#include "com.h"

enum
{
	DI_DEGREES = 1,
	DI_FFNOMINALMAX = 1,
	DI_SECONDS = 1000,
};

enum DI : HRESULT
{
	DI_OK,
	DIERR_DEVICENOTREG,
	DIERR_INPUTLOST,
};

enum DI8DEVCLASS
{
	DI8DEVCLASS_GAMECTRL,
};

struct DICONSTANTFORCE
{
	LONG lMagnitude;
};

struct DIDATAFORMAT
{
};

typedef const DIDATAFORMAT *LPCDIDATAFORMAT;

struct DIDEVICEINSTANCE
{
	GUID guidInstance;
	const char *tszProductName = nullptr;
};

typedef const DIDEVICEINSTANCE *LPCDIDEVICEINSTANCE;
typedef DIDEVICEINSTANCE *LPDIDEVICEINSTANCE;

struct DIDEVICEOBJECTDATA
{
	DWORD dwOfs;
	DWORD dwData;
	DWORD dwTimeStamp;
	DWORD dwSequence;
	UINT_PTR uAppData;
};

typedef DIDEVICEOBJECTDATA *LPDIDEVICEOBJECTDATA;

enum DIEB
{
	DIEB_NOTRIGGER,
};

enum DIENUM
{
	DIENUM_CONTINUE,
	DIENUM_STOP,
};

struct DIENVELOPE
{
	DWORD dwSize;
	DWORD dwAttackLevel;
	DWORD dwAttackTime;
	DWORD dwFadeLevel;
	DWORD dwFadeTime;
};

typedef DIENVELOPE *LPDIENVELOPE;

enum DIEFF
{
	DIEFF_OBJECTOFFSETS = 1,
	DIEFF_CARTESIAN = 2,
	DIEFF_POLAR = 4,
};

struct DIEFFECT
{
	DWORD dwSize;
	DWORD dwFlags;
	DWORD dwDuration;
	DWORD dwSamplePeriod;
	DWORD dwGain;
	DWORD dwTriggerButton;
	DWORD dwTriggerRepeatInterval;
	DWORD cAxes;
	LPDWORD rgdwAxes;
	LPLONG rglDirection;
	LPDIENVELOPE lpEnvelope;
	DWORD cbTypeSpecificParams;
	LPVOID lpvTypeSpecificParams;
	DWORD dwStartDelay;
};

typedef const DIEFFECT *LPCDIEFFECT;

enum DIJOFS
{
	DIJOFS_X,
	DIJOFS_Y,
};

struct DIJOYSTATE2
{
	LONG lX;
	LONG lY;
	LONG lZ;
	LONG lRx;
	LONG lRy;
	LONG lRz;
	LONG rglSlider[2];
	DWORD rgdwPOV[4];
	BYTE rgbButtons[128];
	LONG lVX;
	LONG lVY;
	LONG lVZ;
	LONG lVRx;
	LONG lVRy;
	LONG lVRz;
	LONG rglVSlider[2];
	LONG lAX;
	LONG lAY;
	LONG lAZ;
	LONG lARx;
	LONG lARy;
	LONG lARz;
	LONG rglASlider[2];
	LONG lFX;
	LONG lFY;
	LONG lFZ;
	LONG lFRx;
	LONG lFRy;
	LONG lFRz;
	LONG rglFSlider[2];
};

enum DIMOFS
{
	DIMOFS_X,
	DIMOFS_Y,
	DIMOFS_BUTTON0,
	DIMOFS_BUTTON1,
	DIMOFS_BUTTON2,
};

struct DIMOUSESTATE
{
	LONG lX;
	LONG lY;
	LONG lZ;
	BYTE rgbButtons[4];
};

enum DIPH
{
	DIPH_BYOFFSET,
};

struct DIPROPHEADER
{
	DWORD dwSize;
	DWORD dwHeaderSize;
	DWORD dwObj;
	DWORD dwHow;
};

typedef const DIPROPHEADER *LPCDIPROPHEADER;
typedef DIPROPHEADER *LPDIPROPHEADER;

struct DIPROPRANGE
{
	DIPROPHEADER diph;
	LONG lMin;
	LONG lMax;
};

struct DIPROPSTRING
{
	DIPROPHEADER diph;
	WCHAR wsz[MAX_PATH];
};

struct DIRAMPFORCE
{
	LONG lStart;
	LONG lEnd;
};

enum DISCL
{
	DISCL_NONEXCLUSIVE = 0,
	DISCL_BACKGROUND = 0,
	DISCL_EXCLUSIVE = 1,
	DISCL_FOREGROUND = 2,
};

enum Keyboard_Device
{
	DIK_ESCAPE = 0x01,
	DIK_1 = 0x02,
	DIK_2 = 0x03,
	DIK_3 = 0x04,
	DIK_4 = 0x05,
	DIK_5 = 0x06,
	DIK_6 = 0x07,
	DIK_7 = 0x08,
	DIK_8 = 0x09,
	DIK_9 = 0x0A,
	DIK_0 = 0x0B,
	DIK_MINUS = 0x0C,
	DIK_EQUALS = 0x0D,
	DIK_BACK = 0x0E,
	DIK_TAB = 0x0F,
	DIK_Q = 0x10,
	DIK_W = 0x11,
	DIK_E = 0x12,
	DIK_R = 0x13,
	DIK_T = 0x14,
	DIK_Y = 0x15,
	DIK_U = 0x16,
	DIK_I = 0x17,
	DIK_O = 0x18,
	DIK_P = 0x19,
	DIK_LBRACKET = 0x1A,
	DIK_RBRACKET = 0x1B,
	DIK_RETURN = 0x1C,
	DIK_LCONTROL = 0x1D,
	DIK_A = 0x1E,
	DIK_S = 0x1F,
	DIK_D = 0x20,
	DIK_F = 0x21,
	DIK_G = 0x22,
	DIK_H = 0x23,
	DIK_J = 0x24,
	DIK_K = 0x25,
	DIK_L = 0x26,
	DIK_SEMICOLON = 0x27,
	DIK_APOSTROPHE = 0x28,
	DIK_GRAVE = 0x29,
	DIK_LSHIFT = 0x2A,
	DIK_BACKSLASH = 0x2B,
	DIK_Z = 0x2C,
	DIK_X = 0x2D,
	DIK_C = 0x2E,
	DIK_V = 0x2F,
	DIK_B = 0x30,
	DIK_N = 0x31,
	DIK_M = 0x32,
	DIK_COMMA = 0x33,
	DIK_PERIOD = 0x34,
	DIK_SLASH = 0x35,
	DIK_RSHIFT = 0x36,
	DIK_MULTIPLY = 0x37,
	DIK_LMENU = 0x38,
	DIK_SPACE = 0x39,
	DIK_CAPITAL = 0x3A,
	DIK_F1 = 0x3B,
	DIK_F2 = 0x3C,
	DIK_F3 = 0x3D,
	DIK_F4 = 0x3E,
	DIK_F5 = 0x3F,
	DIK_F6 = 0x40,
	DIK_F7 = 0x41,
	DIK_F8 = 0x42,
	DIK_F9 = 0x43,
	DIK_F10 = 0x44,
	DIK_NUMLOCK = 0x45,
	DIK_SCROLL = 0x46,
	DIK_NUMPAD7 = 0x47,
	DIK_NUMPAD8 = 0x48,
	DIK_NUMPAD9 = 0x49,
	DIK_SUBTRACT = 0x4A,
	DIK_NUMPAD4 = 0x4B,
	DIK_NUMPAD5 = 0x4C,
	DIK_NUMPAD6 = 0x4D,
	DIK_ADD = 0x4E,
	DIK_NUMPAD1 = 0x4F,
	DIK_NUMPAD2 = 0x50,
	DIK_NUMPAD3 = 0x51,
	DIK_NUMPAD0 = 0x52,
	DIK_DECIMAL = 0x53,
	DIK_OEM_102 = 0x56,
	DIK_F11 = 0x57,
	DIK_F12 = 0x58,
	DIK_F13 = 0x64,
	DIK_F14 = 0x65,
	DIK_F15 = 0x66,
	DIK_KANA = 0x70,
	DIK_ABNT_C1 = 0x73,
	DIK_CONVERT = 0x79,
	DIK_NOCONVERT = 0x7B,
	DIK_YEN = 0x7D,
	DIK_ABNT_C2 = 0x7E,
	DIK_NUMPADEQUALS = 0x8D,
	DIK_PREVTRACK = 0x90,
	DIK_AT = 0x91,
	DIK_COLON = 0x92,
	DIK_UNDERLINE = 0x93,
	DIK_KANJI = 0x94,
	DIK_STOP = 0x95,
	DIK_AX = 0x96,
	DIK_UNLABELED = 0x97,
	DIK_NEXTTRACK = 0x99,
	DIK_NUMPADENTER = 0x9C,
	DIK_RCONTROL = 0x9D,
	DIK_MUTE = 0xA0,
	DIK_CALCULATOR = 0xA1,
	DIK_PLAYPAUSE = 0xA2,
	DIK_MEDIASTOP = 0xA4,
	DIK_VOLUMEDOWN = 0xAE,
	DIK_VOLUMEUP = 0xB0,
	DIK_WEBHOME = 0xB2,
	DIK_NUMPADCOMMA = 0xB3,
	DIK_DIVIDE = 0xB5,
	DIK_SYSRQ = 0xB7,
	DIK_RMENU = 0xB8,
	DIK_PAUSE = 0xC5,
	DIK_HOME = 0xC7,
	DIK_UP = 0xC8,
	DIK_PRIOR = 0xC9,
	DIK_LEFT = 0xCB,
	DIK_RIGHT = 0xCD,
	DIK_END = 0xCF,
	DIK_DOWN = 0xD0,
	DIK_NEXT = 0xD1,
	DIK_INSERT = 0xD2,
	DIK_DELETE = 0xD3,
	DIK_LWIN = 0xDB,
	DIK_RWIN = 0xDC,
	DIK_APPS = 0xDD,
	DIK_POWER = 0xDE,
	DIK_SLEEP = 0xDF,
	DIK_WAKE = 0xE3,
	DIK_WEBSEARCH = 0xE5,
	DIK_WEBFAVORITES = 0xE6,
	DIK_WEBREFRESH = 0xE7,
	DIK_WEBSTOP = 0xE8,
	DIK_WEBFORWARD = 0xE9,
	DIK_WEBBACK = 0xEA,
	DIK_MYCOMPUTER = 0xEB,
	DIK_MAIL = 0xEC,
	DIK_MEDIASELECT = 0xED,
	DIK_BACKSPACE = DIK_BACK,
	DIK_NUMPADSTAR = DIK_MULTIPLY,
	DIK_LALT = DIK_LMENU,
	DIK_CAPSLOCK = DIK_CAPITAL,
	DIK_NUMPADMINUS = DIK_SUBTRACT,
	DIK_NUMPADPLUS = DIK_ADD,
	DIK_NUMPADPERIOD = DIK_DECIMAL,
	DIK_NUMPADSLASH = DIK_DIVIDE,
	DIK_RALT = DIK_RMENU,
	DIK_UPARROW = DIK_UP,
	DIK_PGUP = DIK_PRIOR,
	DIK_LEFTARROW = DIK_LEFT,
	DIK_RIGHTARROW = DIK_RIGHT,
	DIK_DOWNARROW = DIK_DOWN,
	DIK_PGDN = DIK_NEXT,
	DIK_CIRCUMFLEX = DIK_PREVTRACK,
};

class IDirectInputEffect : public IUnknown
{
public:
	
	virtual HRESULT Start(DWORD dwIterations, DWORD dwFlags) = 0;
	virtual HRESULT Stop() = 0;
};

typedef IDirectInputEffect *LPDIRECTINPUTEFFECT;

class IDirectInputDevice8 : public IUnknown
{
public:
	
	virtual HRESULT Acquire() = 0;
	virtual HRESULT CreateEffect(REFGUID rguid, LPCDIEFFECT lpeff, LPDIRECTINPUTEFFECT *ppdeff, LPUNKNOWN punkOuter) = 0;
	virtual HRESULT GetDeviceData(DWORD cbObjectData, LPDIDEVICEOBJECTDATA rgdod, LPDWORD pdwInOut, DWORD dwFlags) = 0;
	virtual HRESULT GetDeviceState(DWORD cbData, LPVOID lpvData) = 0;
	virtual HRESULT GetProperty(REFGUID rguidProp, LPDIPROPHEADER pdiph) = 0;
	virtual HRESULT Poll() = 0;
	virtual HRESULT SetCooperativeLevel(HWND hwnd, DWORD dwFlags) = 0;
	virtual HRESULT SetProperty(REFGUID rguidProp, LPCDIPROPHEADER pdiph) = 0;
	virtual HRESULT SetDataFormat(LPCDIDATAFORMAT lpdf) = 0;
	virtual HRESULT Unacquire() = 0;
};

typedef IDirectInputDevice8 *LPDIRECTINPUTDEVICE8;

typedef BOOL (*LPDIENUMDEVICESCALLBACK)(LPCDIDEVICEINSTANCE lpddi, LPVOID pvRef);

class IDirectInput8 : public IUnknown
{
public:
	
	virtual HRESULT CreateDevice(REFGUID rguid, LPDIRECTINPUTDEVICE8 *lplpDirectInputDevice, LPUNKNOWN pUnkOuter) = 0;
	virtual HRESULT EnumDevices(DWORD dwDevType, LPDIENUMDEVICESCALLBACK lpCallback, LPVOID pvRef, DWORD dwFlags) = 0;
};

typedef IDirectInput8 *LPDIRECTINPUT8;

extern const DIDATAFORMAT c_dfDIJoystick2;
extern const DIDATAFORMAT c_dfDIKeyboard;
extern const GUID GUID_ConstantForce;
extern const GUID GUID_RampForce;
extern const GUID GUID_SysKeyboard;
extern const GUID DIPROP_KEYNAME;
extern const GUID DIPROP_RANGE;
extern const IID IID_IDirectInput8;

HRESULT DirectInput8Create(HINSTANCE hinst, DWORD dwVersion, REFIID riidltf, LPVOID *ppvOut, LPUNKNOWN punkOuter);
